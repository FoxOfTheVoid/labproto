// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: proto/services.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CentralNkeys_MyMethod_FullMethodName = "/grpc.central_nkeys/MyMethod"
)

// CentralNkeysClient is the client API for CentralNkeys service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CentralNkeysClient interface {
	MyMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type centralNkeysClient struct {
	cc grpc.ClientConnInterface
}

func NewCentralNkeysClient(cc grpc.ClientConnInterface) CentralNkeysClient {
	return &centralNkeysClient{cc}
}

func (c *centralNkeysClient) MyMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, CentralNkeys_MyMethod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CentralNkeysServer is the server API for CentralNkeys service.
// All implementations must embed UnimplementedCentralNkeysServer
// for forward compatibility
type CentralNkeysServer interface {
	MyMethod(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedCentralNkeysServer()
}

// UnimplementedCentralNkeysServer must be embedded to have forward compatible implementations.
type UnimplementedCentralNkeysServer struct {
}

func (UnimplementedCentralNkeysServer) MyMethod(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyMethod not implemented")
}
func (UnimplementedCentralNkeysServer) mustEmbedUnimplementedCentralNkeysServer() {}

// UnsafeCentralNkeysServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CentralNkeysServer will
// result in compilation errors.
type UnsafeCentralNkeysServer interface {
	mustEmbedUnimplementedCentralNkeysServer()
}

func RegisterCentralNkeysServer(s grpc.ServiceRegistrar, srv CentralNkeysServer) {
	s.RegisterService(&CentralNkeys_ServiceDesc, srv)
}

func _CentralNkeys_MyMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralNkeysServer).MyMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CentralNkeys_MyMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralNkeysServer).MyMethod(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// CentralNkeys_ServiceDesc is the grpc.ServiceDesc for CentralNkeys service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CentralNkeys_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.central_nkeys",
	HandlerType: (*CentralNkeysServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MyMethod",
			Handler:    _CentralNkeys_MyMethod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/services.proto",
}

const (
	RegNkeys_MyMethod_FullMethodName = "/grpc.reg_nkeys/MyMethod"
)

// RegNkeysClient is the client API for RegNkeys service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegNkeysClient interface {
	MyMethod(ctx context.Context, in *Response, opts ...grpc.CallOption) (*Request, error)
}

type regNkeysClient struct {
	cc grpc.ClientConnInterface
}

func NewRegNkeysClient(cc grpc.ClientConnInterface) RegNkeysClient {
	return &regNkeysClient{cc}
}

func (c *regNkeysClient) MyMethod(ctx context.Context, in *Response, opts ...grpc.CallOption) (*Request, error) {
	out := new(Request)
	err := c.cc.Invoke(ctx, RegNkeys_MyMethod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegNkeysServer is the server API for RegNkeys service.
// All implementations must embed UnimplementedRegNkeysServer
// for forward compatibility
type RegNkeysServer interface {
	MyMethod(context.Context, *Response) (*Request, error)
	mustEmbedUnimplementedRegNkeysServer()
}

// UnimplementedRegNkeysServer must be embedded to have forward compatible implementations.
type UnimplementedRegNkeysServer struct {
}

func (UnimplementedRegNkeysServer) MyMethod(context.Context, *Response) (*Request, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyMethod not implemented")
}
func (UnimplementedRegNkeysServer) mustEmbedUnimplementedRegNkeysServer() {}

// UnsafeRegNkeysServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegNkeysServer will
// result in compilation errors.
type UnsafeRegNkeysServer interface {
	mustEmbedUnimplementedRegNkeysServer()
}

func RegisterRegNkeysServer(s grpc.ServiceRegistrar, srv RegNkeysServer) {
	s.RegisterService(&RegNkeys_ServiceDesc, srv)
}

func _RegNkeys_MyMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Response)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegNkeysServer).MyMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegNkeys_MyMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegNkeysServer).MyMethod(ctx, req.(*Response))
	}
	return interceptor(ctx, in, info, handler)
}

// RegNkeys_ServiceDesc is the grpc.ServiceDesc for RegNkeys service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegNkeys_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.reg_nkeys",
	HandlerType: (*RegNkeysServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MyMethod",
			Handler:    _RegNkeys_MyMethod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/services.proto",
}
